syntax = "proto3";

package cloud.filibuster.examples;

message PurchaseRequest {
  string session_id = 1;
  bool abortOnNoDiscount = 2;
  int32 abortOnLessThanDiscountAmount = 3;
}

message PurchaseResponse {
  bool success = 1;
  string total = 2;
}

service APIService {
  rpc Hello (HelloRequest) returns (HelloReply) {}
  rpc World (HelloRequest) returns (HelloReply) {}
  rpc HelloWithMock (HelloRequest) returns (HelloReply) {};
  rpc RedisHello (RedisRequest) returns (RedisReply) {};
  rpc SimulatePurchase (PurchaseRequest) returns (PurchaseResponse) {}
  rpc Purchase (PurchaseRequest) returns (PurchaseResponse) {}
  rpc RedisHelloRetry (RedisRequest) returns (RedisReply) {};
  rpc GetBook (GetBookRequest) returns (GetBookResponse) {};
  rpc GetBookTitle (GetBookRequest) returns (GetBookTitleResponse) {};
}

message GetBookRequest {
  string book_id = 1;
}

message GetBookTitleResponse {
  string title = 1;
}

message GetBookResponse {
  string book = 1;
}

message GetUserRequest {
  string session_id = 1;
}

message GetUserResponse {
  string user_id = 1;
}

service UserService {
  rpc ValidateSession (ValidateSessionRequest) returns (ValidateSessionResponse) {}
  rpc GetUserFromSession (GetUserRequest) returns (GetUserResponse) {}
}

message ValidateSessionRequest {
  string session_id = 1;
}

message ValidateSessionResponse {

}

message GetCartRequest {
  string session_id = 1;
}

message GetCartResponse {
  string cart_id = 1;
  string total = 2;
  string merchant_id = 3;
}

message GetDiscountRequest {
  string code = 1;
}

message GetDiscountResponse {
  string percent = 1;
}

message NotifyDiscountAppliedRequest {
  string cart_id = 1;
}

message NotifyDiscountAppliedResponse {

}

service CartService {
  rpc GetCartForSession (GetCartRequest) returns (GetCartResponse) {}
  rpc GetDiscountOnCart (GetDiscountRequest) returns (GetDiscountResponse) {}
  rpc NotifyDiscountApplied (NotifyDiscountAppliedRequest) returns (NotifyDiscountAppliedResponse) {}
}

service HelloService {
  rpc Hello (HelloRequest) returns (HelloReply) {}
  rpc PartialHello (HelloRequest) returns (HelloReply) {}
  rpc PartialHelloWithErrorHandling (HelloRequest) returns (HelloReply) {}
  rpc PartialHelloExternalGrpc (HelloRequest) returns (HelloReply) {}
  rpc PartialHelloExternalHttp (HelloRequest) returns (HelloReply) {}
  rpc ParallelPartialHello (HelloRequest) returns (HelloReply) {}
  rpc ParallelSynchronousPartialHello (HelloRequest) returns (HelloReply) {}
  rpc LazyHello (HelloRequest) returns (HelloReply) {}
  rpc BlockingHello (HelloRequest) returns (HelloReply) {}
  rpc LotsOfReplies (HelloRequest) returns (stream HelloReply) {}
  rpc LotsOfGreetings (stream HelloRequest) returns (HelloReply) {}
  rpc BidiHello (stream HelloRequest) returns (stream HelloReply) {}
  rpc Unimplemented (HelloRequest) returns (HelloReply) {}
  rpc SmellyRedundantRPC (HelloRequest) returns (HelloReply) {}
  rpc SmellyUnimplementedFailures (HelloRequest) returns (HelloReply) {}
  rpc SmellyResponseBecomesRequest (HelloRequest) returns (HelloReply) {}
  rpc SmellyMultipleInvocationsForIndividualMutations (HelloRequest) returns (HelloReply) {}
  rpc CompositionalHello (HelloExtendedRequest) returns (HelloExtendedReply) {}
  rpc SimplePartialHello (HelloRequest) returns (HelloReply) {}
  rpc ThrowException (HelloRequest) returns (HelloReply) {}
}

message HelloRequest {
  string name = 1;
}

message HelloReply {
  string message = 1;
}

message HelloExtendedRequest {
  string name = 1;
}

message HelloExtendedReply {
  // contains name, directly mapped through.
  string name = 1;

  // contains part of the name, should form a partial match on the argument.
  string first_message = 2;

  // contains nothing from the response.
  string second_message = 3;

  // contains a random datetime.
  string created_at = 4;
}

service WorldService {
  rpc World (WorldRequest) returns (WorldReply) {}
  rpc WorldUnimplemented (WorldRequest) returns (WorldReply) {}
  rpc WorldExternalHttp (WorldRequest) returns (WorldReply) {}
  rpc WorldExternalGrpc (WorldRequest) returns (WorldReply) {}
  rpc WorldRandom (WorldRequest) returns (WorldReply) {}
}

message WorldRequest {
  string name = 1;
}

message WorldReply {
  string message = 1;
}

message RedisRequest {
  string key = 1;
}

message RedisReply {
  string value = 1;
}