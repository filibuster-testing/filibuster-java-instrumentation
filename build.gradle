buildscript {
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.2'
    }
}

plugins {
    id 'java'
    id "com.diffplug.spotless" version "5.0.0"
    id 'signing'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'com.github.johnrengelman.shadow' version '8.1.0'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'com.diffplug.spotless'
apply plugin: 'com.google.protobuf'

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

repositories {
    mavenCentral()
}

dependencies {
    ['armeria',
     'armeria-brave',
     'armeria-grpc',
     'armeria-jetty9',
     'armeria-kafka',
     'armeria-kotlin',
     'armeria-logback',
     'armeria-retrofit2',
     'armeria-rxjava3',
     'armeria-saml',
     'armeria-thrift0.13',
     'armeria-tomcat9',
     'armeria-zookeeper3'].each {
        implementation "com.linecorp.armeria:${it}:1.14.0"
    }

    implementation "io.lettuce:lettuce-core:6.2.2.RELEASE"
    implementation 'org.postgresql:postgresql:42.3.3'
    implementation 'com.datastax.cassandra:cassandra-driver-core:4.0.0'
    implementation 'software.amazon.awssdk:dynamodb:2.20.74'
    implementation 'com.datastax.cassandra:cassandra-driver-core:4.0.0'
    implementation "com.github.cliftonlabs:json-simple:2.1.2"
    implementation "org.json:json:20220924"
    implementation 'org.jetbrains:annotations:16.0.2'
    implementation "io.grpc:grpc-netty-shaded:1.40.1"
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.grpcmock:grpcmock-junit5:0.9.3'
    implementation 'com.google.protobuf:protobuf-java-util:3.21.7'

    // Pinned jetty for WireMock
    implementation 'org.eclipse.jetty:jetty-http:9.4.46.v20220331'
    implementation 'org.eclipse.jetty:jetty-io:9.4.46.v20220331'
    implementation 'org.eclipse.jetty:jetty-server:9.4.46.v20220331'
    implementation 'org.eclipse.jetty:jetty-util:9.4.46.v20220331'

    // JUnit annotations
    implementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'

    // Test Containers
    implementation "org.testcontainers:testcontainers:1.17.5"

    // Excel
    implementation "org.apache.poi:poi:5.2.0"
    implementation "org.apache.poi:poi-ooxml:5.2.0"
    implementation "org.jxls:jxls-jexcel:1.0.9"
    implementation "org.dhatim:fastexcel:0.15.3"
    implementation "org.dhatim:fastexcel-reader:0.15.3"

    // Logging
    runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'
    runtimeOnly 'org.slf4j:log4j-over-slf4j:1.7.30'

    // Test dependencies are used for testing Filibuster.  Any jUnit, etc. have to be main dependencies
    // with the assumption that Filibuster is only pulled in as a test dependency in the application that
    // uses it.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    testImplementation 'io.opentelemetry:opentelemetry-api:1.6.0'
    testImplementation 'io.opentelemetry:opentelemetry-extension-annotations:1.6.0'

    testImplementation 'io.opentelemetry.instrumentation:opentelemetry-instrumentation-api:1.6.0-alpha'

    testImplementation 'com.github.tomakehurst:wiremock-standalone:2.27.2'
    testImplementation 'io.netty:netty-tcnative-boringssl-static:2.0.61.Final'
}

test {
    useJUnitPlatform()
    maxParallelForks = 1
    timeout = Duration.ofMinutes(60)
    minHeapSize = "128m" // initial heap size
    maxHeapSize = "2048m" // maximum heap size
    jvmArgs '-XX:MaxPermSize=256m' // mem argument for the test JVM

    systemProperty "filibuster.enabled", "TRUE"

    filter {
        excludeTestsMatching("cloud.filibuster.functional.python.*")
        excludeTestsMatching("cloud.filibuster.functional.shouldFails.*")
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += '-parameters'
    options.compilerArgs += '-Xlint:unchecked'
    options.compilerArgs += '-Xlint:deprecation'
}

tasks.withType(JavaCompile).configureEach {
    options.forkOptions.jvmArgs.addAll(['--add-opens', 'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED'])
}

protobuf {
    // Configure the protoc executable.
    protoc {
        if ("aarch64" == System.getProperty("os.arch")) {
            // mac m1
            artifact = "com.google.protobuf:protoc:3.12.0:osx-x86_64"
        } else {
            // other
            artifact = "com.google.protobuf:protoc:3.12.0"
        }
    }

    // Locate the codegen plugins.
    plugins {
        // Locate a plugin with name 'grpc'.
        grpc {
            if ("aarch64" == System.getProperty("os.arch")) {
                // mac m1
                artifact = "io.grpc:protoc-gen-grpc-java:1.36.1:osx-x86_64"
            } else {
                // other
                artifact = 'io.grpc:protoc-gen-grpc-java:1.36.1'
            }
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            grpc {}
        }
    }
}

javadoc {
    options {
        links 'https://docs.oracle.com/javase/8/docs/api/'
    }
}

// Publishing
// adapted from: https://selectfrom.dev/publishing-your-first-open-source-library-with-gradle-50bd0b1cd3af

group = "cloud.filibuster"
archivesBaseName = "instrumentation"
version = "2.2.3"

java {
    withJavadocJar()
    withSourcesJar()
}

nexusPublishing {
    repositories {
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'Filibuster instrumentation for the JVM'
                artifactId = 'instrumentation'
                packaging = 'jar'
                description = 'Instrumtation for the JVM to enable the Filibuster testing utility.'
                url = 'https://github.com/filibuster-testing/filibuster-java-instrumentation'

                scm {
                    connection = 'scm:git:git://github.com/filibuster-testing/filibuster-java-instrumentation.git'
                    developerConnection = 'scm:git:ssh://github.com/filibuster-testing/filibuster-java-instrumentation.git'
                    url = 'https://github.com/filibuster-testing/filibuster-java-instrumentation'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'cmeiklejohn'
                        name = 'Christopher S. Meiklejohn'
                        email = 'christopher.meiklejohn@gmail.com'
                    }
                }
            }
        }
    }
}

signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionTxt()  {
    ext.outputFile = file("$genOutputDir/version.txt")
    outputs.file(outputFile)
    doLast {
        outputFile.text = """GroupId: ${project.group}
Name: ${project.name}
Version: $version
Build-time: ${java.time.LocalDateTime.now()}
"""
    }
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionTxt

task testUnit(type: Test) {
    useJUnitPlatform()

    systemProperty "filibuster.enabled", "TRUE"

    filter {
        includeTestsMatching('cloud.filibuster.unit.*')
    }
}

task testIntegration(type: Test) {
    useJUnitPlatform()

    maxParallelForks = 1
    timeout = Duration.ofMinutes(60)
    minHeapSize = "128m" // initial heap size
    maxHeapSize = "2048m" // maximum heap size
    jvmArgs '-XX:MaxPermSize=256m' // mem argument for the test JVM

    systemProperty "filibuster.enabled", "TRUE"

    filter {
        includeTestsMatching('cloud.filibuster.integration.*')
    }
}

task testWithFaultInjection(type: Test) {
    useJUnitPlatform()

    maxParallelForks = 1
    timeout = Duration.ofMinutes(60)
    minHeapSize = "128m" // initial heap size
    maxHeapSize = "2048m" // maximum heap size
    jvmArgs '-XX:MaxPermSize=256m' // mem argument for the test JVM

    systemProperty "filibuster.enabled", "TRUE"

    filter {
        includeTestsMatching('cloud.filibuster.functional.java.*')
    }
}

task testWithDatabaseFaultInjection(type: Test) {
    useJUnitPlatform()

    maxParallelForks = 1
    timeout = Duration.ofMinutes(60)
    minHeapSize = "128m" // initial heap size
    maxHeapSize = "2048m" // maximum heap size
    jvmArgs '-XX:MaxPermSize=256m' // mem argument for the test JVM

    systemProperty "filibuster.enabled", "TRUE"

    filter {
        includeTestsMatching('cloud.filibuster.functional.database.*')
    }
}

task testWithFaultInjectionShouldFails(type: Test) {
    useJUnitPlatform()

    maxParallelForks = 1
    timeout = Duration.ofMinutes(60)
    minHeapSize = "128m" // initial heap size
    maxHeapSize = "2048m" // maximum heap size
    jvmArgs '-XX:MaxPermSize=256m' // mem argument for the test JVM

    systemProperty "filibuster.enabled", "TRUE"

    filter {
        includeTestsMatching('cloud.filibuster.functional.shouldFails.*')
    }
}

task testWithFaultInjectionPython(type: Test) {
    useJUnitPlatform()

    systemProperty "filibuster.enabled", "TRUE"

    filter {
        includeTestsMatching('cloud.filibuster.functional.python.*')
    }
}

task testWithFaultInjectionDocker(type: Test) {
    useJUnitPlatform()

    systemProperty "filibuster.enabled", "TRUE"

    filter {
        includeTestsMatching('cloud.filibuster.functional.docker.*')
    }
}
